<?php
class testLti_consumer extends DrupalWebTestCase {

	protected $privileged_user;

	public static function getInfo() {
		// Note: getInfo() strings should not be translated.
		return array(
			'name' => 'LTI Consumer unit tests',
			'description' => 'Test that lti_consumer works properly.',
			'group' => 'LTI Consumer',
		);
	}

	public function setUp() {
		parent::setUp(array('lti_consumer'));
	}

	public function testLtiConsumerMenu() {
		$result = lti_consumer_menu();
		$message = 'Result should should return the same value as items';
		$items = array();
		$items['admin/settings/lti/consumer'] = array(
			'title' => 'LTI Consumer Admin Settings',
			'page callback' => 'lti_consumer_admin',
			'access arguments' => array('administer site configuration'),
		);

		$items['lti/%'] = array(
			'title' => 'LTI Consumer Settings',
			'page callback' => 'lti_consumer_page',
			'page arguments' => array(1),
			'access arguments' => array('access content'),
		);
		$this->assertEqual($result, $items, $message);

	}

	public function testLtiConsumerAdmin() {	
		$result = lti_consumer_admin();
		$message = 'Result and should return the same value as returnValue';
		$lti_id = 0;
		if (arg(5)) {
			$lti_id = arg(5);
		}
		$form = drupal_get_form('lti_consumer_admin_form', $lti_id);
		$header = array('SID', 'Name', 'Domain', 'Key', 'Created', 'Updated', 'Preview', 'Edit', 'Delete');
		$res = db_query("SELECT * FROM {lti_consumer} ORDER BY id ASC");
		$rows = array();
		foreach ($res as $r) {
			$row = array();
			$row[] = $r->id;
			$row[] = $r->lti_name;
			$row[] = $r->lti_domain;
			$row[] = $r->lti_key;
			$row[] = format_date($r->created, 'small');
			$row[] = format_date($r->updated, 'small');
			$row[] = l('Preview', 'lti/' . $r->sid);
			$row[] = l('Edit', 'admin/settings/lti/consumer/edit/' . $r->sid);
			$row[] = l('Delete', 'admin/settings/lti/consumer/delete/' . $r->sid);

			$rows[] = $row;
		}
		$returnValue = theme('table', array('header' => $header, 'rows' => $rows));
		$this->assertEqual($result, $returnValue, $message);
	}
}
?>