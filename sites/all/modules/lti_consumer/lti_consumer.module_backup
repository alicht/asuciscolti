<?php
// $Id$

/**
 * @file
 * LTI Consumer: expose a Drupal path to a third-party application
 */

/**
 * Implementation of hook_menu().
 */
function lti_consumer_menu () { 
  $items = array();

  $items['admin/settings/lti/consumer'] = array(
    'title' => 'LTI Consumer Admin Settings',
    'page callback' => 'lti_consumer_admin',
    'access arguments' => array('administer site configuration'),
  );
  $items['lti/%'] = array(
    'title' => 'LTI Consumer Settings',
    'page callback' => 'lti_consumer_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  return $items;
}

function lti_consumer_admin () {
  $lti_id = 0;
  if (arg(5)) {
    $lti_id = arg(5);
  }

  //$form = drupal_get_form('lti_consumer_admin_form', $lti_id);
  
  $header = array('Id', 'Name', 'Domain', 'Key', 'Created', 'Updated', 'Preview', 'Edit', 'Delete');

  $res = db_query("SELECT * FROM {lti_consumer} ORDER BY id ASC");

  $rows = array();
  foreach ($res as $r) {
    $row = array();
    $row[] = $r->id;
    $row[] = $r->lti_name;
    $row[] = $r->lti_domain;
    $row[] = $r->lti_key;
    $row[] = format_date($r->created, 'small');
    $row[] = format_date($r->updated, 'small');
    $row[] = l('Preview', 'lti/' . $r->id);
    $row[] = l('Edit', 'admin/settings/lti/consumer/edit/' . $r->id);
    $row[] = l('Delete', 'admin/settings/lti/consumer/delete/' . $r->id);

    $rows[] = $row;
  }
  
  //return drupal_get_form('lti_consumer_admin_form', $lti_id);
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function lti_consumer_admin_form ($form, &$form_state, $lti_id) {
  $lti = null;
  if (isset($lti_id) && (int)$lti_id > 0) {
    $lti = db_query('SELECT * FROM {lti_consumer} WHERE id = :id', array(':id' => $lti_id))->fetchObject();
  }

  //$form = array();

  $form['lti'] = array(
    '#type' => 'fieldset',
    '#title' => 'New LTI Consumer',
  );

  $form['lti']['lti_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Consumer Name',
    '#description' => 'A unqiue name for this LTI consumer',
    '#default_value' => (isset($lti) ? $lti->lti_name : ''),
    '#required' => TRUE,
  );
  $form['lti']['lti_domain'] = array(
    '#type' => 'textarea',
    '#title' => 'Consumer Domain',
    '#description' => 'The LTI tool domain',
    '#default_value' => (isset($lti) ? $lti->lti_domain : 'http://www.imsglobal.org/developers/BLTI/tool.php'),
    '#required' => TRUE,
  );
  $form['lti']['lti_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Consumer Key',
    '#description' => 'The LTI consumer key',
    '#default_value' => (isset($lti) ? $lti->lti_key : 'lmsng.school.edu'),
    '#required' => TRUE,
  );
  $form['lti']['lti_secret'] = array(
    '#type' => 'textfield',
    '#title' => 'Consumer Secret',
    '#description' => 'The LTI consumer secret',
    '#default_value' => (isset($lti) ? $lti->lti_secret : '12345'),
    '#required' => TRUE,
  );

  $form['lti_id'] = array(
    '#type' => 'value',
    '#value' => (isset($lti) ? $lti->id : -1),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;

}

function lti_consumer_admin_form_submit ($form_id, $form_state) {
  $values = $form_state['values'];
  $lti_id = $values['lti_id'];

  if ($lti_id > 0) {
    // Update an existing LTI consumer
    db_update('lti_consumer')
    ->fields(array(
    	'lti_name' => $values['lti_name'],
    	'lti_domain' => $values['lti_domain'],
    	'lti_key' => $values['lti_key'],
    	'lti_secret' => $values['lti_secret'],
    	'updated' => REQUEST_TIME,
    	))
    ->condition('id', $lti_id, '=')
    ->execute();
  }
  else {
    // Create a new LTI consumer
    db_insert('lti_consumer')
    ->fields(array(
    	'lti_name' => $values['lti_name'],
    	'lti_domain' => $values['lti_domain'],
    	'lti_key' => $values['lti_key'],
    	'lti_secret' => $values['lti_secret'],
    	'created' => REQUEST_TIME,
    	'updated' => REQUEST_TIME,
    	))
    ->execute();
  }
}


function lti_consumer_page ($lti_id) {
  global $user;

  module_load_include('php', 'oauth_common', 'lib/OAuth');
  module_load_include('lib.php', 'oauth');

  $lti = db_query('SELECT * FROM {lti_consumer} WHERE id = :id', array(':id' => $lti_id))->fetchObject();

  $params = array(
      "resource_link_id" => $lti->id,
      //"user_id" => $user->uid,
      //"roles" => lti_consumer_get_ims_role($user),
      //"lis_person_name_full" => $user->name,
      //"lis_person_contact_email_primary" => $user->mail,
      //"lis_person_sourcedid" => $user->uid,
      //"context_id" => $_GET['q'],
      //"context_title" => $lti->lti_name,
      //"context_label" => $lti->lti_name,
      //"oauth_callback" => "about:blank",
      "lti_version" => "LTI-1p0",
      "lti_message_type" => "basic-lti-launch-request",
      //"lti_submit" => "Launch Endpoint with LTI Data",
  );
 
  $consumer = new OAuthConsumer($lti->lti_key, $lti->lti_secret, $params);
  echo "$consumer";
  
  //$token = new OAuthToken($lti->lti_key, $lti->lti_secret);
  //echo "$token";
  
  $hmac_method = new OAuthSignatureMethod_HMAC_SHA1();
  //echo "$hmac_method";


  $req = OAuthRequest::from_consumer_and_token($consumer, '', 'POST', $lti->lti_domain, $params);
  echo "$req";
  
  $req->sign_request($hmac_method, $consumer, '');
  

  // Pass this back up "out of band" for debugging
  //$last_base_string = $req->get_signature_base_string();

  $url = $req->get_normalized_http_url();
  $new_params = $req->get_parameters();
	//$new_params = $params;
	
if (!empty($params)) {
    $url .= '?' . http_build_query($params,'','&');
   }
   echo "$url";
  
	$headers = array(
    $req->to_header(),
    );

	//echo "$headers";
	
    $post = curl_init($lti->lti_domain);
    //curl_setopt($post, CURLOPT_URL, $url);
   
    $oauth_version = _oauth_common_version();
    curl_setopt($post, CURLOPT_USERAGENT, 'Drupal/' . VERSION . ' OAuth/' . $oauth_version);
    curl_setopt($post, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($post, CURLOPT_HEADER, true);
    curl_setopt($post, CURLOPT_POST, true);
    curl_setopt($post, CURLOPT_POSTFIELDS, $new_params);
    curl_setopt($post, CURLOPT_RETURNTRANSFER, true);

	$response=curl_exec($post);
	curl_close($post);
	//echo "$post";
  return $response;
  
/*  
  $consumer_key = $lti->lti_key;
  $consumer_secret = $lti->lti_secret;
  
  $oauth = new OAuth($consumer_key, $consumer_secret, OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
  $oauth->enableDebug();
*/
}

function lti_consumer_sign_parameters ($lti_path, $request_params) {
}

function lti_consumer_get_ims_role ($user) {
  return "Learner";
}

  ?>
